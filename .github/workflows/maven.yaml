# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: project cicd flow  

on:
  push:
    branches: [ master ] 
  pull_request:
    branches: [ master ]

jobs:
  sonar:
    name: Sonar Build and analyze
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=ckrorg_gh-actions-jfrog
  
  security:
    runs-on: ubuntu-latest
    needs:  [sonar]
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/maven@master
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif
  build-code: 
  
    runs-on: ubuntu-latest 

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: '1.8'
        distribution: 'adopt'
        cache: maven
    - name: Build source code into jar file with Maven
      run: |
           mvn -B package --file pom.xml
           mkdir artifacts && cp target/*.jar artifacts
           cd artifacts && ls
    - name: Saving the artifact 
      uses: actions/upload-artifact@v2
      with:
        name: Springboot artifact
        path: artifacts
        
  Pushing-Artifact-to-Jfrog_Repo:
    name: Pushing-Artifact-to-Jfrog_Repo
    runs-on: ubuntu-latest
    needs: [build-code]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: Springboot artifact
      - run: ls
          
      - name: Setting up Jfrog-CLI
        uses: jfrog/setup-jfrog-cli@v2
      - name: Generate build number
        uses: einaregilsson/build-number@v3
        with:
          token: ${{secrets.github_token}}
      #run: jf --version
      - name: Pushing the built artifact to Jfrog repository
        run: |
             jf rt upload springboot-welcome.jar sandbox-maven-local --url=${{secrets.JF_URL}}/artifactory/ --user=${{ secrets.JF_USER }} --password=${{ secrets.JF_PASSWORD }}
             jf rt build-publish gitaction --buildname=$BUILD_NUMBER --url=${{secrets.JF_URL}}/artifactory/ --user=${{ secrets.JF_USER }} --password=${{ secrets.JF_PASSWORD }}
             jf rt bs gitaction --buildname=$BUILD_NUMBER --url=${{secrets.JF_URL}}/artifactory/ --user=${{ secrets.JF_USER }} --password=${{ secrets.JF_PASSWORD }} --fail=false
      - name: Step:6 Build & Push Docker image to JFrog-Artifact repo
        run: |
          docker login -u${{ secrets.JF_USER }} -p${{ secrets.JF_PASSWORD }} mskcc.jfrog.io
          docker build -t mskcc.jfrog.io/sandbox-docker-local/springboot-welcome:$BUILD_NUMBER .
          docker push mskcc.jfrog.io/sandbox-docker-local/springboot-welcome:$BUILD_NUMBER
